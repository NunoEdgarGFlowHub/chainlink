// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/smartcontractkit/chainlink/core/store (interfaces: CallerSubscriber)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "github.com/smartcontractkit/chainlink/core/store/models"
	reflect "reflect"
)

// MockCallerSubscriber is a mock of CallerSubscriber interface
type MockCallerSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockCallerSubscriberMockRecorder
}

// MockCallerSubscriberMockRecorder is the mock recorder for MockCallerSubscriber
type MockCallerSubscriberMockRecorder struct {
	mock *MockCallerSubscriber
}

// NewMockCallerSubscriber creates a new mock instance
func NewMockCallerSubscriber(ctrl *gomock.Controller) *MockCallerSubscriber {
	mock := &MockCallerSubscriber{ctrl: ctrl}
	mock.recorder = &MockCallerSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCallerSubscriber) EXPECT() *MockCallerSubscriberMockRecorder {
	return m.recorder
}

// Call mocks base method
func (m *MockCallerSubscriber) Call(arg0 interface{}, arg1 string, arg2 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call
func (mr *MockCallerSubscriberMockRecorder) Call(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockCallerSubscriber)(nil).Call), varargs...)
}

// EthSubscribe mocks base method
func (m *MockCallerSubscriber) EthSubscribe(arg0 context.Context, arg1 interface{}, arg2 ...interface{}) (models.EthSubscription, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EthSubscribe", varargs...)
	ret0, _ := ret[0].(models.EthSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EthSubscribe indicates an expected call of EthSubscribe
func (mr *MockCallerSubscriberMockRecorder) EthSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EthSubscribe", reflect.TypeOf((*MockCallerSubscriber)(nil).EthSubscribe), varargs...)
}
